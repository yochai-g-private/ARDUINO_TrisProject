// Import required libraries
#include <Hash.h>
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <FS.h>

// Replace with your network credentials
const char* ssid     = "HomeNet";	       
const char* password = "1357864200";

enum {
    BUTTON_PIN              = D0,
    SCL_PIN                 = D1,
    SDA_PIN                 = D2,
    MANUAL_RELAY_PIN        = D3,
    MOTOR_RELAY_PIN         = D4,
    DIRECTION_RELAY_PIN     = D5,
    RED_LED_PIN             = D6,
    GREEN_LED_PIN           = D7,
    BLUE_LEN_PIN            = D8,
};
// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

struct Configuration
{
    Configuration() {   }

    struct States
    {
        bool on;
        bool nightly;
        bool sun_protect;
        bool DST;
    }   states;

    struct Timing
    {
        struct Direction {
            double  all,
                    air,
                    sun;
        } up, down;
    }   timings;
};

static Configuration cfg;

String processor(const String& var)
{
    if (var == "ONOFF_STATE")           return cfg.states.on            ? "פועל" : "מופסק";
    if (var == "ONOFF")                 return cfg.states.on            ? "OFF"  : "ON";

    if (var == "NIGHTLY_STATE")         return cfg.states.nightly       ? "יורד בלילה" : "אינו יורד בלילה";
    if (var == "NIGHTLY")               return cfg.states.nightly       ? "OFF" : "ON";

    if (var == "SUN_PROTECT_STATE")     return cfg.states.sun_protect   ? "מגן מהשמש" : "אינו מגן מהשמש";
    if (var == "SUN_PROTECT")           return cfg.states.sun_protect   ? "OFF" : "ON";

    if (var == "DST_STATE")             return cfg.states.DST           ? "שעון קיץ" : "שעון חורף";
    if (var == "DST")                   return cfg.states.DST           ? "OFF" : "ON";
}

void setup() {
    // Serial port for debugging purposes
    Serial.begin(115200);

    // Initialize SPIFFS
    if (!SPIFFS.begin()) 
    {
        Serial.println("An Error has occurred while mounting SPIFFS");
        return;
    }

    // Connect to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) 
    {
        delay(1000);
        Serial.println("Connecting to WiFi..");
    }

    // Print ESP32 Local IP Address
    Serial.println(WiFi.localIP());

    // Route for root / web page
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println(__LINE__);
        request->send(SPIFFS, "/index.html", String(), false, processor);
        });

    // Route to load style.css file
    server.on("/style.css", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println(__LINE__);
        request->send(SPIFFS, "/style.css", "text/css");
        });

    // Route to set GPIO to HIGH
    server.on("/onoff", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println(__LINE__);
        cfg.states.on = !cfg.states.on;
        request->send(SPIFFS, "/index.html", String(), false, processor);
        });

    // Route to set GPIO to LOW
    server.on("/nightly", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println(__LINE__);
        cfg.states.nightly = !cfg.states.nightly;
        request->send(SPIFFS, "/index.html", String(), false, processor);
        });

    server.on("/sun_protect", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println(__LINE__);
        cfg.states.sun_protect = !cfg.states.sun_protect;
        request->send(SPIFFS, "/index.html", String(), false, processor);
        });

    server.on("/dst", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println(__LINE__);
        cfg.states.DST = !cfg.states.DST;
        request->send(SPIFFS, "/index.html", String(), false, processor);
        });

    // Start server
    server.begin();
}

void loop() {

}
